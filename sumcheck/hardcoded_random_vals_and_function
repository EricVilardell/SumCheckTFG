from itertools import product

MOD = 17

def g(x1, x2, x3):
    return (x1 * x2 + x3) % MOD

A0 = {}
for b1, b2, b3 in product([0, 1], repeat=3):
    A0[(b1, b2, b3)] = g(b1, b2, b3)

A = [A0]
r = [3, 5, 2]  

for j in range(3):  
    Aj = A[-1]
    pj = {}
    if j == 0:
        for x1 in [0, 1]:
            sumval = 0
            for b2, b3 in product([0, 1], repeat=2):
                sumval += Aj[(x1, b2, b3)]
            pj[x1] = sumval % MOD
        print(f"Round 1: p_1(0) = {pj[0]}, p_1(1) = {pj[1]}")
        rj = r[j]
        Aj_next = {}
        for b2, b3 in product([0, 1], repeat=2):
            val = (Aj[(0, b2, b3)] * (1 - rj) + Aj[(1, b2, b3)] * rj) % MOD
            Aj_next[(b2, b3)] = val
        A.append(Aj_next)
    elif j == 1:
        for x2 in [0, 1]:
            sumval = 0
            for b3 in [0, 1]:
                sumval += Aj[(x2, b3)]
            pj[x2] = sumval % MOD
        print(f"Round 2: p_2(0) = {pj[0]}, p_2(1) = {pj[1]}")
        rj = r[j]
        Aj_next = {}
        for b3 in [0, 1]:
            val = (Aj[(0, b3)] * (1 - rj) + Aj[(1, b3)] * rj) % MOD
            Aj_next[(b3,)] = val
        A.append(Aj_next)
    elif j == 2:
        for x3 in [0, 1]:
            sumval = 0
            for b3 in [0, 1]:
                if x3 == b3:
                    sumval += Aj[(b3,)]
            pj[x3] = sumval % MOD
        print(f"Round 3: p_3(0) = {pj[0]}, p_3(1) = {pj[1]}")

g_eval = g(r[0], r[1], r[2])
print(f"\nFinal evaluation: g({r[0]}, {r[1]}, {r[2]}) = {g_eval}")